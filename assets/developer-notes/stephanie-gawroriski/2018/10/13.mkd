# 2018/10/13

## 10:28

Took a peek and the monitor for `Reader` is only used for `skip` so that is
not too bad at all.

## 10:35

I should have a fallback if the specified system encoding is not valid.

## 10:36

Maybe not.

## 12:38

The hashmap has negative divisions used, so that means I need to mask the
lower value to remove the sign bit.

## 15:43

Looks to be that protected fields are unable to be accessed from subclasses
so need to check that out.

## 15:49

Okay so, it is `UnmodifiableMap.__SetIterator__` and it is accessing the
parent class iterator. So this needs fixing.

## 16:01

Looks like protected and package private fields and methods could be accessed
if they are in the same package. Oh wow, this is something.

## 16:05

Wow, I learned something new! Or at least something I really forgot about but
now I know. This definitely changes how I create fields and methods.

## 16:07

Well, this is quite the revelation of something I learned long ago but
completely forgot about. But it works and actually kind of makes things better
I guess.

## 19:02

I paired with a friend on SquirrelJME and I fried her brain with exception
handling, heehee.

## 19:20

So for integer overflow parsing, not all values reach overflow so that is
something: `RV int:31 int:35`.

## 19:23

I need better reporting.

## 20:27

So now that I have exception handling, I can pretty much run any program now
apart from anything needing the few instructions not implemented. Although
there is the main library to consider. I suppose what I should do now is make
it easier to run tests by implementing the stuff needed for suites and tasks
and otherwise. Although I do still kind of need threads and such. But bulk
running of tests might just be the next thing to do. Although I can really
branch out to many other things now as needed. I could though just move onto
double SpringCoat, although I would really need file handling for that to be
doing anything useful. I could try to run Squirrel Quarrel, but that would be
far too much work and would take some time. So I guess the next goal is
implementing SpringCoat on top of SpringCoat. It would be far slower and will
likely just use tons of memory, but if it became self hosting it could
probably run everything. If I wanted to use the host VM libraries to provide
suites and such like as a forwarding scheme, then that could work. Although
I would need a way to list the contents of a JAR in order to more effectively
handle it. Although actually, no I do not need to do that because the current
code just uses resource as stream for classes and such. SpringCoat on
SpringCoat like that would only work if the original classes were still
available, which they might not be. But it is worth a try to be honest I would
say.

## 23:06

Okay so I really think the next thing to do would be to implement suites and
tasks, this way I can launch things. I really need to be able to do bulk
tests and also support things like performing launching from a launcher and
such.
